#!/usr/bin/python
# This file is part of the Black Magic Debug project.
#
# Copyright (C) 2023 1BitSquared <info@1bitsquared.com>
# Written by Rafael Silva <perigoso@riseup.net>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script is used to wrap the libopencm3 build system to allow out-of-tree builds.
# This is required because libopencm3's build system does not provide a way to build out-of-tree, and does not provide an install target.
# Both are required for the meson external project module to work, so we wrap the build system to hack it in.
# Note that with this wrapper, the build log reports build failures when in fact the build succeeded.

import argparse
import os.path
import shutil

SOURCE_DIR = os.path.dirname(os.path.realpath(__file__))

# Original file, alias in build directory
TO_COPY = {
    "Makefile": "libopencm3.mk",  # Copy original Makefile to build directory as libopencm3.mk
    "scripts/irq2nvic_h": None,  # Copy script scripts/irq2nvic_h
    "lib": None,  # Copy directory lib
    "include": None,  # Copy directory include
}

# Wrap Makefile
WRAP_MAKEFILE_NAME = "Makefile"
WRAP_MAKEFILE = """# This file is part of the Black Magic Debug project.
# Copyright (C) 2023 1BitSquared <info@1bitsquared.com>
#
# This is a generated file. Do not edit.
# generated by {configure}

# Verbosity
# Variable Q is provided by original makefile to control cmd echo
V = {verbose}

# Toolchain prefix
PREFIX = {toolchain}

# Include the original makefile
include {makefile}

# Installation prefix
INSTALL_PREFIX = $(DESTDIR){prefix}
LIBDIR = $(INSTALL_PREFIX)/{libdir}
INCDIR = $(INSTALL_PREFIX)/{incdir}

install: install-headers install-lib

install-headers:
\t@printf "  INSTALL  $(INCDIR)\\n";
\t$(Q)mkdir -p $(INCDIR)
\t$(Q)cp -r include/* $(INCDIR)
\t$(Q)mkdir -p $(INCDIR)/usb
\t$(Q)cp -r lib/usb/*.h $(INCDIR)/usb

install-lib:
\t@printf "  INSTALL  $(LIBDIR)\\n";
\t$(Q)mkdir -p $(LIBDIR)
\t$(Q)cp -r lib/*.a $(LIBDIR)
\t$(Q)cp -r lib/*.ld $(LIBDIR)

.PHONY: install

"""


def clean(outdir: str) -> None:
    if not os.path.exists(outdir):
        return

    print(f"Cleaning build directory `{outdir}`")

    # Remove files from build directory
    for file in TO_COPY:
        alias = TO_COPY[file]
        dst = os.path.join(outdir, alias or file)
        if os.path.exists(dst):
            if os.path.isdir(dst):
                shutil.rmtree(dst)
            else:
                os.remove(dst)

    # Remove wrap Makefile
    makefile = os.path.join(outdir, WRAP_MAKEFILE_NAME)
    if os.path.exists(makefile):
        os.remove(makefile)


def configure(outdir: str, toolchain: str, prefix: str, libdir: str, incdir: str, verbose: bool) -> None:
    if not os.path.exists(outdir):
        os.makedirs(os.path.dirname(dst), exist_ok=True)

    print(f"Configuring build directory `{outdir}`")

    # Copy files from source directory
    for file in TO_COPY:
        alias = TO_COPY[file]
        src = os.path.join(SOURCE_DIR, file)
        dst = os.path.join(outdir, alias or file)
        if os.path.isdir(src):
            shutil.copytree(src, dst, dirs_exist_ok=True)
        else:
            os.makedirs(os.path.dirname(dst), exist_ok=True)
            shutil.copy2(src, dst)

    # Create wrap Makefile
    makefile = os.path.join(outdir, WRAP_MAKEFILE_NAME)
    with open(makefile, "w") as f:
        f.write(
            WRAP_MAKEFILE.format(
                configure=__file__,
                verbose="1" if verbose else "0",
                toolchain=toolchain,
                makefile=TO_COPY["Makefile"],
                prefix=prefix,
                libdir=libdir,
                incdir=incdir,
            ),
        )


def main():
    parser = argparse.ArgumentParser(description="Configure libopencm3 for out-of-tree build")
    parser.add_argument(
        "--outdir",
        help="Build directory",
        default=os.getcwd(),
    )
    parser.add_argument(
        "--toolchain",
        default="arm-none-eabi-",
    )
    parser.add_argument(
        "--prefix",
        help="Installation prefix",
        default="/usr/local",
    )
    parser.add_argument(
        "--libdir",
        help="Installation library directory",
        default="lib",
    )
    parser.add_argument(
        "--incdir",
        help="Installation include directory",
        default="include",
    )
    parser.add_argument(
        "--host",
        help="Not used, provided by meson for compatibility",
    )
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Verbose output",
    )
    args = parser.parse_args()

    assert args.outdir != SOURCE_DIR, "Cannot configure in-tree, use a different directory from source"

    print("Configuring libopencm3 for out-of-tree build")

    clean(args.outdir)
    configure(args.outdir, args.toolchain, args.prefix, args.libdir, args.incdir, args.verbose)


if __name__ == "__main__":
    main()
